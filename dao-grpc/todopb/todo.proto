syntax = "proto3";

package todo.v1;

option go_package = "todopb";

service TodoService {
  rpc CreateTodo(CreateTodoRequest) returns (CreateTodoResponse) {}

  // rpc CreateTodos(CreateTodosRequest) returns (CreateTodosResponse) {}

  // rpc GetTodo(GetTodoRequest) returns (GetTodoResponse) {}

  // rpc ListTodo(ListTodoRequest) returns (ListTodoResponse) {}

  // rpc DeleteTodo(DeleteTodoRequest) returns (DeleteTodoResponse) {}

  // rpc UpdateTodo(UpdateTodoRequest) returns (UpdateTodoResponse) {}

  // rpc UpdateTodos(UpdateTodosRequest) returns (UpdateTodosResponse) {}
}

message Todo {
  // @inject_tag: bson:",_id"
  string id = 1;

  // @inject_tag: bson:"title"
  string title = 2;

  // @inject_tag: bson:"description"
  string description = 3;

  // @inject_tag: bson:"completed"
  bool completed = 4;
}

message NewTodoRequest {
  string title = 1;
  string description = 2;
  bool completed = 3;
}

message CreateTodoRequest { NewTodoRequest item = 1; }

message CreateTodoResponse { Todo todo = 1; }

message CreateTodosRequest { repeated Todo items = 1; }

message CreateTodosResponse { repeated string ids = 1; }

message GetTodoRequest { string id = 1; }

message GetTodoResponse { Todo item = 1; }

message ListTodoRequest {
  int32 limit = 1;
  bool not_completed = 2;
}

message ListTodoResponse { repeated Todo items = 1; }

message DeleteTodoRequest { string id = 1; }

message DeleteTodoResponse {}

message UpdateTodoRequest { Todo item = 1; }

message UpdateTodoResponse {}

message UpdateTodosRequest { repeated Todo items = 1; }

message UpdateTodosResponse {}